"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.bothServerHandler = exports.apiServerHandler = void 0;
var _now = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/date/now"));
var _chalk = _interopRequireDefault(require("chalk"));
var _fastify = require("@redwoodjs/fastify");
var _projectConfig = require("@redwoodjs/project-config");
const apiServerHandler = async options => {
  const {
    port,
    socket,
    apiRootPath
  } = options;
  const tsApiServer = (0, _now.default)();
  console.log(_chalk.default.dim.italic('Starting API Server...'));
  const fastify = (0, _fastify.createFastifyInstance)();
  process.on('exit', () => {
    fastify?.close();
  });
  await fastify.register(_fastify.redwoodFastifyAPI, {
    redwood: {
      ...options
    }
  });
  let listenOptions;
  if (socket) {
    listenOptions = {
      path: socket
    };
  } else {
    listenOptions = {
      port,
      host: process.env.NODE_ENV === 'production' ? '0.0.0.0' : '::'
    };
  }
  fastify.listen(listenOptions);
  fastify.ready(() => {
    fastify.log.trace({
      custom: {
        ...fastify.initialConfig
      }
    }, 'Fastify server configuration');
    fastify.log.trace(`Registered plugins \n${fastify.printPlugins()}`);
    console.log(_chalk.default.italic.dim('Took ' + ((0, _now.default)() - tsApiServer) + ' ms'));
    const on = socket ? socket : _chalk.default.magenta(`http://localhost:${port}${apiRootPath}`);
    console.log(`API listening on ${on}`);
    const graphqlEnd = _chalk.default.magenta(`${apiRootPath}graphql`);
    console.log(`GraphQL endpoint at ${graphqlEnd}`);
    sendProcessReady();
  });
};
exports.apiServerHandler = apiServerHandler;
const bothServerHandler = async options => {
  const {
    port,
    socket
  } = options;
  const tsServer = (0, _now.default)();
  console.log(_chalk.default.italic.dim('Starting API and Web Servers...'));
  const fastify = (0, _fastify.createFastifyInstance)();
  process.on('exit', () => {
    fastify?.close();
  });
  await fastify.register(_fastify.redwoodFastifyWeb, {
    redwood: {
      ...options
    }
  });
  const apiRootPath = (0, _fastify.coerceRootPath)((0, _projectConfig.getConfig)().web.apiUrl);
  await fastify.register(_fastify.redwoodFastifyAPI, {
    redwood: {
      ...options,
      apiRootPath
    }
  });
  let listenOptions;
  if (socket) {
    listenOptions = {
      path: socket
    };
  } else {
    listenOptions = {
      port,
      host: process.env.NODE_ENV === 'production' ? '0.0.0.0' : '::'
    };
  }
  fastify.listen(listenOptions);
  fastify.ready(() => {
    console.log(_chalk.default.italic.dim('Took ' + ((0, _now.default)() - tsServer) + ' ms'));
    const on = socket ? socket : _chalk.default.magenta(`http://localhost:${port}${apiRootPath}`);
    const webServer = _chalk.default.green(`http://localhost:${port}`);
    const apiServer = _chalk.default.magenta(`http://localhost:${port}`);
    console.log(`Web server started on ${webServer}`);
    console.log(`API serving from ${apiServer}`);
    console.log(`API listening on ${on}`);
    const graphqlEnd = _chalk.default.magenta(`${apiRootPath}graphql`);
    console.log(`GraphQL endpoint at ${graphqlEnd}`);
    sendProcessReady();
  });
};
exports.bothServerHandler = bothServerHandler;
function sendProcessReady() {
  return process.send && process.send('ready');
}