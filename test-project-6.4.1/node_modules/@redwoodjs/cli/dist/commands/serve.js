"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.builder = void 0;
exports.coerceRootPath = coerceRootPath;
exports.description = exports.command = void 0;
var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _chalk = _interopRequireDefault(require("chalk"));
var _execa = _interopRequireDefault(require("execa"));
var _terminalLink = _interopRequireDefault(require("terminal-link"));
var _cliHelpers = require("@redwoodjs/cli-helpers");
var _lib = require("../lib");
var _colors = _interopRequireDefault(require("../lib/colors"));
const command = exports.command = 'serve [side]';
const description = exports.description = 'Run server for api or web in production';
function hasExperimentalServerFile() {
  const serverFilePath = _path.default.join((0, _lib.getPaths)().api.dist, 'server.js');
  return _fs.default.existsSync(serverFilePath);
}
const builder = async yargs => {
  yargs.usage('usage: $0 <side>').command({
    command: '$0',
    description: 'Run both api and web servers',
    builder: yargs => yargs.options({
      port: {
        default: (0, _lib.getConfig)().web?.port || 8910,
        type: 'number',
        alias: 'p'
      },
      socket: {
        type: 'string'
      }
    }),
    handler: async argv => {
      (0, _cliHelpers.recordTelemetryAttributes)({
        command: 'serve',
        port: argv.port,
        host: argv.host,
        socket: argv.socket
      });

      // Run the experimental server file, if it exists, with web side also
      if (hasExperimentalServerFile()) {
        console.log([separator, `ðŸ§ª ${_chalk.default.green('Experimental Feature')} ðŸ§ª`, separator, 'Using the experimental API server file at api/dist/server.js', separator].join('\n'));
        await (0, _execa.default)('yarn', ['node', _path.default.join('dist', 'server.js'), '--enable-web'], {
          cwd: (0, _lib.getPaths)().api.base,
          stdio: 'inherit',
          shell: true
        });
        return;
      }

      // Wanted to use the new web-server package here, but can't because
      // of backwards compatibility reasons. With `bothServerHandler` both
      // the web side and the api side run on the same server with the same
      // port. If we use a separate fe server and api server we can't run
      // them on the same port, and so we lose backwards compatibility.
      // TODO: Use @redwoodjs/web-server when we're ok with breaking
      // backwards compatibility.
      const {
        bothServerHandler
      } = await import('./serveHandler.js');
      await bothServerHandler(argv);
    }
  }).command({
    command: 'api',
    description: 'Start server for serving only the api',
    builder: yargs => yargs.options({
      port: {
        default: (0, _lib.getConfig)().api?.port || 8911,
        type: 'number',
        alias: 'p'
      },
      socket: {
        type: 'string'
      },
      apiRootPath: {
        alias: ['api-root-path', 'rootPath', 'root-path'],
        default: '/',
        type: 'string',
        desc: 'Root path where your api functions are served',
        coerce: coerceRootPath
      }
    }),
    handler: async argv => {
      (0, _cliHelpers.recordTelemetryAttributes)({
        command: 'serve',
        port: argv.port,
        host: argv.host,
        socket: argv.socket,
        apiRootPath: argv.apiRootPath
      });

      // Run the experimental server file, if it exists, api side only
      if (hasExperimentalServerFile()) {
        console.log([separator, `ðŸ§ª ${_chalk.default.green('Experimental Feature')} ðŸ§ª`, separator, 'Using the experimental API server file at api/dist/server.js', separator].join('\n'));
        await (0, _execa.default)('yarn', ['node', _path.default.join('dist', 'server.js')], {
          cwd: (0, _lib.getPaths)().api.base,
          stdio: 'inherit',
          shell: true
        });
        return;
      }
      const {
        apiServerHandler
      } = await import('./serveHandler.js');
      await apiServerHandler(argv);
    }
  }).command({
    command: 'web',
    description: 'Start server for serving only the web side',
    builder: yargs => yargs.options({
      port: {
        default: (0, _lib.getConfig)().web?.port || 8910,
        type: 'number',
        alias: 'p'
      },
      socket: {
        type: 'string'
      },
      apiHost: {
        alias: 'api-host',
        type: 'string',
        desc: 'Forward requests from the apiUrl, defined in redwood.toml to this host'
      }
    }),
    handler: async argv => {
      (0, _cliHelpers.recordTelemetryAttributes)({
        command: 'serve',
        port: argv.port,
        host: argv.host,
        socket: argv.socket,
        apiHost: argv.apiHost
      });
      await (0, _execa.default)('yarn', ['rw-web-server', '--port', argv.port, '--socket', argv.socket, '--api-host', argv.apiHost], {
        cwd: (0, _lib.getPaths)().base,
        stdio: 'inherit',
        shell: true
      });
    }
  }).middleware(argv => {
    (0, _cliHelpers.recordTelemetryAttributes)({
      command: 'serve'
    });

    // Make sure the relevant side has been built, before serving
    const positionalArgs = argv._;
    if ((0, _includes.default)(positionalArgs).call(positionalArgs, 'web') && !_fs.default.existsSync(_path.default.join((0, _lib.getPaths)().web.dist), 'index.html')) {
      console.error(_colors.default.error('\n Please run `yarn rw build web` before trying to serve web. \n'));
      process.exit(1);
    }
    if ((0, _includes.default)(positionalArgs).call(positionalArgs, 'api') && !_fs.default.existsSync(_path.default.join((0, _lib.getPaths)().api.dist))) {
      console.error(_colors.default.error('\n Please run `yarn rw build api` before trying to serve api. \n'));
      process.exit(1);
    }
    if (
    // serve both
    positionalArgs.length === 1 && (!_fs.default.existsSync(_path.default.join((0, _lib.getPaths)().api.dist)) || !_fs.default.existsSync(_path.default.join((0, _lib.getPaths)().web.dist), 'index.html'))) {
      console.error(_colors.default.error('\n Please run `yarn rw build` before trying to serve your redwood app. \n'));
      process.exit(1);
    }

    // Set NODE_ENV to production, if not set
    if (!process.env.NODE_ENV) {
      process.env.NODE_ENV = 'production';
    }
  }).epilogue(`Also see the ${(0, _terminalLink.default)('Redwood CLI Reference', 'https://redwoodjs.com/docs/cli-commands#serve')}`);
};
exports.builder = builder;
const separator = _chalk.default.hex('#ff845e')('------------------------------------------------------------------');

// We'll clean this up later, but for now note that this function is
// duplicated between this package and @redwoodjs/fastify
// to avoid importing @redwoodjs/fastify when the CLI starts.
function coerceRootPath(path) {
  // Make sure that we create a root path that starts and ends with a slash (/)
  const prefix = path.charAt(0) !== '/' ? '/' : '';
  const suffix = path.charAt(path.length - 1) !== '/' ? '/' : '';
  return `${prefix}${path}${suffix}`;
}