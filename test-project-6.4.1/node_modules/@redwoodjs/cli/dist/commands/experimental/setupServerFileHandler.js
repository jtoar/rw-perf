"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = handler;
var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));
var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/concat"));
require("core-js/modules/esnext.json.parse.js");
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _listr = require("listr2");
var _cliHelpers = require("@redwoodjs/cli-helpers");
var _projectConfig = require("@redwoodjs/project-config");
var _telemetry = require("@redwoodjs/telemetry");
var _lib = require("../../lib");
var _colors = _interopRequireDefault(require("../../lib/colors"));
var _project = require("../../lib/project");
var _setupServerFile = require("./setupServerFile");
var _util = require("./util");
const {
  version
} = JSON.parse(_fs.default.readFileSync(_path.default.resolve(__dirname, '../../../package.json'), 'utf-8'));
async function handler({
  force,
  verbose
}) {
  const redwoodPaths = (0, _lib.getPaths)();
  const ts = (0, _project.isTypeScriptProject)();
  const serverFilePath = _path.default.join(redwoodPaths.api.src, `server.${(0, _project.isTypeScriptProject)() ? 'ts' : 'js'}`);
  const tasks = new _listr.Listr([{
    title: 'Confirmation',
    task: async (_ctx, task) => {
      const confirmation = await task.prompt({
        type: 'Confirm',
        message: 'The server file is experimental. Continue?'
      });
      if (!confirmation) {
        throw new Error('User aborted');
      }
    }
  }, {
    title: 'Adding the experimental server file...',
    task: () => {
      const serverFileTemplateContent = _fs.default.readFileSync(_path.default.resolve(__dirname, 'templates', 'server.ts.template'), 'utf-8');
      const setupScriptContent = ts ? serverFileTemplateContent : (0, _lib.transformTSToJS)(serverFilePath, serverFileTemplateContent);
      return [(0, _lib.writeFile)(serverFilePath, setupScriptContent, {
        overwriteExisting: force
      })];
    }
  }, {
    title: 'Adding config to redwood.toml...',
    task: (_ctx, task) => {
      const redwoodTomlPath = (0, _projectConfig.getConfigPath)();
      const configContent = _fs.default.readFileSync(redwoodTomlPath, 'utf-8');
      if (!(0, _includes.default)(configContent).call(configContent, '[experimental.serverFile]')) {
        // Use string replace to preserve comments and formatting
        (0, _lib.writeFile)(redwoodTomlPath, (0, _concat.default)(configContent).call(configContent, `\n[experimental.serverFile]\n\tenabled = true\n`), {
          overwriteExisting: true // redwood.toml always exists
        });
      } else {
        task.skip(`The [experimental.serverFile] config block already exists in your 'redwood.toml' file.`);
      }
    }
  }, (0, _cliHelpers.addApiPackages)(['fastify', 'chalk@4.1.2', `@redwoodjs/fastify@${version}`, `@redwoodjs/project-config@${version}`]), {
    task: () => {
      (0, _util.printTaskEpilogue)(_setupServerFile.command, _setupServerFile.description, _setupServerFile.EXPERIMENTAL_TOPIC_ID);
    }
  }], {
    rendererOptions: {
      collapseSubtasks: false,
      persistentOutput: true
    },
    renderer: verbose ? 'verbose' : 'default'
  });
  try {
    await tasks.run();
  } catch (e) {
    (0, _telemetry.errorTelemetry)(process.argv, e.message);
    console.error(_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
}