"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = void 0;
require("core-js/modules/es.array.push.js");
var _splice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/splice"));
var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));
var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/concat"));
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _listr = require("listr2");
var _cliHelpers = require("@redwoodjs/cli-helpers");
var _projectConfig = require("@redwoodjs/project-config");
var _telemetry = require("@redwoodjs/telemetry");
var _lib = require("../../lib");
const PATHS = (0, _cliHelpers.getPaths)();
const handler = async ({
  force
}) => {
  const extension = _cliHelpers.isTypeScriptProject ? 'ts' : 'js';
  const notes = [];
  const tasks = new _listr.Listr([(0, _cliHelpers.addApiPackages)(['@envelop/sentry@5', '@sentry/node@7', '@sentry/tracing@7']), (0, _cliHelpers.addWebPackages)(['@sentry/react@7', '@sentry/tracing@7']), (0, _cliHelpers.addEnvVarTask)('SENTRY_DSN', 'https://XXXXXXX@XXXXXXX.ingest.sentry.io/XXXXXXX', 'https://docs.sentry.io/product/sentry-basics/dsn-explainer/'), {
    title: 'Setting up Sentry on the API and web sides',
    task: () => (0, _cliHelpers.writeFilesTask)({
      [_path.default.join(PATHS.api.lib, `sentry.${extension}`)]: _fs.default.readFileSync(_path.default.join(__dirname, 'templates/sentryApi.ts.template')).toString(),
      [_path.default.join(PATHS.web.src, 'lib', `sentry.${extension}`)]: _fs.default.readFileSync(_path.default.join(__dirname, 'templates/sentryWeb.ts.template')).toString()
    }, {
      existingFiles: force ? 'OVERWRITE' : 'SKIP'
    })
  }, {
    title: 'Implementing the Envelop plugin',
    task: ctx => {
      const graphqlHandlerPath = _path.default.join(PATHS.api.functions, `graphql.${extension}`);
      const contentLines = _fs.default.readFileSync(graphqlHandlerPath).toString().split('\n');
      const handlerIndex = contentLines.findLastIndex(line => /^export const handler = createGraphQLHandler\({/.test(line));
      const pluginsIndex = contentLines.findLastIndex(line => /extraPlugins:/.test(line));
      if (handlerIndex === -1 || pluginsIndex !== -1) {
        ctx.addEnvelopPluginSkipped = true;
        return;
      }
      (0, _splice.default)(contentLines).call(contentLines, handlerIndex, 1, "import 'src/lib/sentry'", '', 'export const handler = createGraphQLHandler({', 'extraPlugins: [useSentry({', 'includeRawResult: true,', 'includeResolverArgs: true,', 'includeExecuteVariables: true,', '})],');
      (0, _splice.default)(contentLines).call(contentLines, 0, 0, "import { useSentry } from '@envelop/sentry'");
      _fs.default.writeFileSync(graphqlHandlerPath, (0, _cliHelpers.prettify)('graphql.ts', contentLines.join('\n')));
    }
  }, {
    title: "Replacing Redwood's Error boundary",
    task: () => {
      const contentLines = _fs.default.readFileSync(PATHS.web.app).toString().split('\n');
      const webImportIndex = contentLines.findLastIndex(line => /^import { FatalErrorBoundary, RedwoodProvider } from '@redwoodjs\/web'$/.test(line));
      (0, _splice.default)(contentLines).call(contentLines, webImportIndex, 1, "import { RedwoodProvider } from '@redwoodjs/web'");
      const boundaryOpenIndex = contentLines.findLastIndex(line => /<FatalErrorBoundary page={FatalErrorPage}>/.test(line));
      (0, _splice.default)(contentLines).call(contentLines, boundaryOpenIndex, 1, '<Sentry.ErrorBoundary fallback={FatalErrorPage}>');
      const boundaryCloseIndex = contentLines.findLastIndex(line => /<\/FatalErrorBoundary>/.test(line));
      (0, _splice.default)(contentLines).call(contentLines, boundaryCloseIndex, 1, '</Sentry.ErrorBoundary>');
      (0, _splice.default)(contentLines).call(contentLines, 0, 0, "import Sentry from 'src/lib/sentry'");
      _fs.default.writeFileSync(PATHS.web.app, (0, _cliHelpers.prettify)('App.tsx', contentLines.join('\n')));
    }
  }, {
    title: 'Adding config to redwood.toml...',
    task: (_ctx, task) => {
      const redwoodTomlPath = (0, _projectConfig.getConfigPath)();
      const configContent = _fs.default.readFileSync(redwoodTomlPath, 'utf-8');
      if (!(0, _includes.default)(configContent).call(configContent, '[experimental.sentry]')) {
        // Use string replace to preserve comments and formatting
        (0, _lib.writeFile)(redwoodTomlPath, (0, _concat.default)(configContent).call(configContent, `\n[experimental.sentry]\n\tenabled = true\n`), {
          overwriteExisting: true // redwood.toml always exists
        });
      } else {
        task.skip(`The [experimental.sentry] config block already exists in your 'redwood.toml' file.`);
      }
    }
  }, {
    title: 'One more thing...',
    task: ctx => {
      notes.push(_cliHelpers.colors.green('You will need to add `SENTRY_DSN` to `includeEnvironmentVariables` in redwood.toml.'));
      if (ctx.addEnvelopPluginSkipped) {
        notes.push(`${_cliHelpers.colors.underline('Make sure you implement the Sentry Envelop plugin:')} https://redwoodjs.com/docs/cli-commands#sentry-envelop-plugin`);
      } else {
        notes.push("Check out RedwoodJS' docs for more: https://redwoodjs.com/docs/cli-commands#setup-sentry");
      }
    }
  }]);
  try {
    await tasks.run();
    console.log(notes.join('\n'));
  } catch (e) {
    (0, _telemetry.errorTelemetry)(process.argv, e.message);
    console.error(_cliHelpers.colors.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
exports.handler = handler;