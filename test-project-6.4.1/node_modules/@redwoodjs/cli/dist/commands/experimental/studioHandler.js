"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = void 0;
var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));
var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/concat"));
var _fs = _interopRequireDefault(require("fs"));
var _projectConfig = require("@redwoodjs/project-config");
var _lib = require("../../lib");
var _packages = require("../../lib/packages");
var _studio = require("./studio");
var _util = require("./util");
const handler = async options => {
  (0, _util.printTaskEpilogue)(_studio.command, _studio.description, _studio.EXPERIMENTAL_TOPIC_ID);
  try {
    // Check the module is installed
    if (!(0, _packages.isModuleInstalled)('@redwoodjs/studio')) {
      console.log('The studio package is not installed, installing it for you, this may take a moment...');
      await (0, _packages.installRedwoodModule)('@redwoodjs/studio');
      console.log('Studio package installed successfully.');
      console.log('Adding config to redwood.toml...');
      const redwoodTomlPath = (0, _projectConfig.getConfigPath)();
      const configContent = _fs.default.readFileSync(redwoodTomlPath, 'utf-8');
      if (!(0, _includes.default)(configContent).call(configContent, '[experimental.studio]')) {
        // Use string replace to preserve comments and formatting
        (0, _lib.writeFile)(redwoodTomlPath, (0, _concat.default)(configContent).call(configContent, `\n[experimental.studio]\n  enabled = true\n`), {
          overwriteExisting: true // redwood.toml always exists
        });
      } else {
        console.log(`The [experimental.studio] config block already exists in your 'redwood.toml' file.`);
      }
    }

    // Import studio and start it
    const {
      start
    } = await import('@redwoodjs/studio');
    await start({
      open: options.open
    });
  } catch (e) {
    console.log('Cannot start the development studio');
    console.log(e);
    process.exit(1);
  }
};
exports.handler = handler;